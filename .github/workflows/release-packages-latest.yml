name: Release Packages (Latest)

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch  # 0.0.x (bug fixes)
          - minor  # 0.x.0 (new features)
          - major  # x.0.0 (breaking changes)
  release:
    types: [published]

permissions:
  contents: write
  pull-requests: read

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper version bumping
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Cache node_modules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            */*/node_modules
          key: ${{ runner.os }}-node-modules-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-node-modules-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Cache build outputs
        uses: actions/cache@v4
        with:
          path: |
            packages/loafy/dist
            packages/loafy/tsconfig.tsbuildinfo
            apps/template-nextjs/.next
            apps/website/.next
          key: ${{ runner.os }}-build-${{ hashFiles('packages/loafy/src/**', 'apps/template-nextjs/src/**', 'apps/website/src/**') }}
          restore-keys: |
            ${{ runner.os }}-build-

      - name: Build packages
        run: pnpm run build --filter="./packages/**"

      - name: Get version from tag (if triggered by release)
        if: github.event_name == 'release'
        id: get_version_from_tag
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "NEW_VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Bump version (if triggered by workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        id: bump_version
        run: |
          cd packages/loafy
          
          # Get current version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Remove any pre-release suffixes (like --alpha.1)
          CLEAN_VERSION=$(echo $CURRENT_VERSION | sed 's/--.*$//')
          echo "Clean version: $CLEAN_VERSION"
          
          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CLEAN_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          # Bump version based on input
          case "${{ github.event.inputs.version_type }}" in
            major)
              NEW_MAJOR=$((MAJOR + 1))
              NEW_MINOR=0
              NEW_PATCH=0
              ;;
            minor)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$((MINOR + 1))
              NEW_PATCH=0
              ;;
            patch)
              NEW_MAJOR=$MAJOR
              NEW_MINOR=$MINOR
              NEW_PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="${NEW_MAJOR}.${NEW_MINOR}.${NEW_PATCH}"
          echo "New version: $NEW_VERSION"
          
          # Update loafy package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Update create-loafy package.json (both version and loafy dependency)
          cd ../../packages/create-loafy
          npm version $NEW_VERSION --no-git-tag-version
          node -e "const fs=require('fs');const pkg=JSON.parse(fs.readFileSync('package.json','utf8'));pkg.dependencies.loafy='$NEW_VERSION';fs.writeFileSync('package.json',JSON.stringify(pkg,null,2)+'\n');"
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Generate release notes
        id: release_notes
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            NEW_VERSION="${{ steps.bump_version.outputs.NEW_VERSION }}"
          else
            NEW_VERSION="${{ steps.get_version_from_tag.outputs.NEW_VERSION }}"
          fi
          
          # Get the last release tag
          LAST_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 1)
          echo "Last release tag: $LAST_TAG"
          
          # Get commits since last release
          if [ -n "$LAST_TAG" ]; then
            COMMITS=$(git log ${LAST_TAG}..HEAD --oneline --no-merges --pretty=format:"- %s")
          else
            # Fallback if no tags exist
            COMMITS=$(git log --oneline --no-merges -n 20 --pretty=format:"- %s")
          fi
          
          # Count commits for summary
          COMMIT_COUNT=$(echo "$COMMITS" | wc -l)
          
          # Get previous version for comparison
          if [ -n "$LAST_TAG" ]; then
            PREV_VERSION=${LAST_TAG#v}
            COMPARE_URL="https://github.com/${{ github.repository }}/compare/v${PREV_VERSION}...v${NEW_VERSION}"
          else
            COMPARE_URL="https://github.com/${{ github.repository }}/commits/v${NEW_VERSION}"
          fi
          
          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed
          
          ${COMMITS}
          
          **${COMMIT_COUNT} commits** since last release
          
          **Full Changelog**: ${COMPARE_URL}
          EOF
          
          echo "RELEASE_NOTES_FILE=release_notes.md" >> $GITHUB_OUTPUT

      - name: Commit version changes (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add packages/loafy/package.json packages/create-loafy/package.json
          git commit -m "chore: bump version to v${{ steps.bump_version.outputs.NEW_VERSION }}"
          git push

      - name: Create Git tag (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        run: |
          git tag "v${{ steps.bump_version.outputs.NEW_VERSION }}"
          git push origin "v${{ steps.bump_version.outputs.NEW_VERSION }}"

      - name: Create GitHub Release (if workflow_dispatch)
        if: github.event_name == 'workflow_dispatch'
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: "v${{ steps.bump_version.outputs.NEW_VERSION }}"
          release_name: "v${{ steps.bump_version.outputs.NEW_VERSION }}"
          body_path: ${{ steps.release_notes.outputs.RELEASE_NOTES_FILE }}
          draft: false
          prerelease: false

      - name: Publish to npm
        if: github.event_name == 'workflow_dispatch' || github.event_name == 'release'
        run: |
          cd packages/loafy
          npm publish --access public
          cd ../create-loafy
          npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}